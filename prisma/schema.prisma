// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Event {
  id          String   @id @default(uuid())
  name        String
  description String
  date        DateTime
  price       Float

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  spots Spot[]

  @@map("events")
}

enum SpotStatus {
  AVAILABLE
  RESERVED
}

enum TicketKind {
  FULL
  HALF
}

enum TicketStatus {
  RESERVED
  CANCELED
}

model Spot {
  id   String @id @default(uuid())
  name String

  status SpotStatus

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  event   Event  @relation(fields: [eventId], references: [id])
  eventId String @map("event_id")

  ticket Ticket?

  reservationHistory ReservationHistory[]

  @@map("spots")
}

model Ticket {
  id         String     @id @default(uuid())
  email      String
  ticketKind TicketKind

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  spot   Spot   @relation(fields: [spotId], references: [id])
  spotId String

  @@unique([spotId])
  @@map("tickets")
}

model ReservationHistory {
  id         String       @id @default(uuid())
  email      String
  ticketKind TicketKind
  status     TicketStatus

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  spot   Spot   @relation(fields: [spotId], references: [id])
  spotId String

  @@unique([spotId])
  @@map("reservation_histories")
}
